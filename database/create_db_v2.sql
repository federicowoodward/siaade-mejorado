-- Eliminar base de datos si existe y crearla nueva
DROP DATABASE IF EXISTS dbsiaade;
CREATE DATABASE dbsiaade;

-- Conectar a la nueva base de datos
\c dbsiaade;

-- Habilitar extensiones necesarias
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS pgcrypto;

-- =====================================================
-- TABLAS PRINCIPALES
-- =====================================================

-- Tabla de roles
DROP TABLE IF EXISTS roles CASCADE;
CREATE TABLE roles (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL UNIQUE
);

-- Tabla de datos de dirección
DROP TABLE IF EXISTS address_data CASCADE;
CREATE TABLE address_data (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    street TEXT,
    number TEXT,
    floor TEXT,
    apartment TEXT,
    neighborhood TEXT,
    locality TEXT,
    province TEXT,
    postal_code TEXT,
    country TEXT
);

-- Tabla principal de usuarios
DROP TABLE IF EXISTS users CASCADE;
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name TEXT,
    last_name TEXT,
    email TEXT UNIQUE,
    password TEXT,
    cuil TEXT UNIQUE,
    role_id INTEGER NOT NULL REFERENCES roles(id) ON DELETE RESTRICT
);

-- Tabla de información adicional del usuario
DROP TABLE IF EXISTS user_info CASCADE;
CREATE TABLE user_info (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    document_type TEXT,
    document_value TEXT,
    phone TEXT,
    emergency_name TEXT,
    emergency_phone TEXT
);

-- Tabla de datos comunes (personales)
DROP TABLE IF EXISTS common_data CASCADE;
CREATE TABLE common_data (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    address_data_id INTEGER REFERENCES address_data(id) ON DELETE SET NULL,
    sex TEXT,
    birth_date DATE,
    birth_place TEXT,
    nationality TEXT
);

-- =====================================================
-- TABLAS DE ROLES ESPECÍFICOS
-- =====================================================

-- Tabla de estudiantes
DROP TABLE IF EXISTS students CASCADE;
CREATE TABLE students (
    user_id UUID PRIMARY KEY REFERENCES users(id) ON DELETE CASCADE,
    legajo TEXT UNIQUE
);

-- Tabla de profesores
DROP TABLE IF EXISTS teachers CASCADE;
CREATE TABLE teachers (
    user_id UUID PRIMARY KEY REFERENCES users(id) ON DELETE CASCADE
);

-- Tabla de preceptores
DROP TABLE IF EXISTS preceptors CASCADE;
CREATE TABLE preceptors (
    user_id UUID PRIMARY KEY REFERENCES users(id) ON DELETE CASCADE
);

-- Tabla de secretarios
DROP TABLE IF EXISTS secretaries CASCADE;
CREATE TABLE secretaries (
    user_id UUID PRIMARY KEY REFERENCES users(id) ON DELETE CASCADE,
    is_directive BOOLEAN DEFAULT false
);

-- =====================================================
-- TABLAS ACADÉMICAS
-- =====================================================

-- Tabla de materias/asignaturas
DROP TABLE IF EXISTS subjects CASCADE;
CREATE TABLE subjects (
    id SERIAL PRIMARY KEY,
    subject_name TEXT,
    teacher UUID NOT NULL REFERENCES teachers(user_id) ON DELETE RESTRICT,
    preceptor UUID NOT NULL REFERENCES preceptors(user_id) ON DELETE RESTRICT,
    course_num INTEGER,
    course_letter TEXT,
    course_year TEXT,
    correlative INTEGER REFERENCES subjects(id) ON DELETE SET NULL
);

-- Tabla de estudiantes por materia (inscripciones)
DROP TABLE IF EXISTS subject_students CASCADE;
CREATE TABLE subject_students (
    id SERIAL PRIMARY KEY,
    subject_id INTEGER NOT NULL REFERENCES subjects(id) ON DELETE CASCADE,
    student_id UUID NOT NULL REFERENCES students(user_id) ON DELETE CASCADE,
    enrollment_date DATE
);

-- Tabla de exámenes por materia
DROP TABLE IF EXISTS exams CASCADE;
CREATE TABLE exams (
    id SERIAL PRIMARY KEY,
    subject_id INTEGER NOT NULL REFERENCES subjects(id) ON DELETE CASCADE,
    title TEXT, -- Examen 1, Examen parcial, etc.
    date DATE,
    is_valid BOOLEAN -- false = examen que tiene recuperatorio y no debe contarse en el promedio general
);

-- Tabla de resultados de exámenes
DROP TABLE IF EXISTS exam_results CASCADE;
CREATE TABLE exam_results (
    id SERIAL PRIMARY KEY,
    exam_id INTEGER NOT NULL REFERENCES exams(id) ON DELETE CASCADE,
    student_id UUID NOT NULL REFERENCES students(user_id) ON DELETE CASCADE,
    score DECIMAL(4,2) -- Nota obtenida
);

-- Tabla de inasistencias por materia
DROP TABLE IF EXISTS subject_absences CASCADE;
CREATE TABLE subject_absences (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    subject_id INTEGER NOT NULL REFERENCES subjects(id) ON DELETE CASCADE,
    student_id UUID NOT NULL REFERENCES students(user_id) ON DELETE CASCADE,
    dates DATE[] NOT NULL -- Array de fechas de inasistencias
);

-- =====================================================
-- SISTEMA DE MESAS DE EXÁMENES FINALES
-- =====================================================

-- Tabla de mesas de examen
DROP TABLE IF EXISTS exam_table CASCADE;
CREATE TABLE exam_table (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL, -- Ej: "Mesa de examen diciembre 2025"
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    created_by UUID NOT NULL REFERENCES secretaries(user_id) ON DELETE RESTRICT -- Quién creó la mesa
);

-- Tabla de exámenes finales dentro de cada mesa
DROP TABLE IF EXISTS final_exams CASCADE;
CREATE TABLE final_exams (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    exam_table_id INTEGER NOT NULL REFERENCES exam_table(id) ON DELETE CASCADE,
    subject_id INTEGER NOT NULL REFERENCES subjects(id) ON DELETE CASCADE,
    exam_date DATE NOT NULL,
    aula TEXT
);

-- Tabla de inscripciones de estudiantes a exámenes finales
DROP TABLE IF EXISTS final_exams_students CASCADE;
CREATE TABLE final_exams_students (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    final_exams_id INTEGER NOT NULL REFERENCES final_exams(id) ON DELETE CASCADE,
    student_id UUID NOT NULL REFERENCES students(user_id) ON DELETE CASCADE,
    enrolled BOOLEAN,
    enrolled_at DATE,
    score DECIMAL(4,2),
    notes TEXT -- Observaciones o comentarios del acta
);


-- =====================================================
-- ÍNDICES PARA OPTIMIZACIÓN
-- =====================================================

-- Índices para búsquedas frecuentes
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_cuil ON users(cuil);
CREATE INDEX idx_users_role_id ON users(role_id);
CREATE INDEX idx_students_legajo ON students(legajo);
CREATE INDEX idx_subjects_teacher ON subjects(teacher);
CREATE INDEX idx_subjects_preceptor ON subjects(preceptor);
CREATE INDEX idx_subjects_correlative ON subjects(correlative);
CREATE INDEX idx_subject_students_subject_id ON subject_students(subject_id);
CREATE INDEX idx_subject_students_student_id ON subject_students(student_id);
CREATE INDEX idx_exams_subject_id ON exams(subject_id);
CREATE INDEX idx_exams_date ON exams(date);
CREATE INDEX idx_exam_results_exam_id ON exam_results(exam_id);
CREATE INDEX idx_exam_results_student_id ON exam_results(student_id);
CREATE INDEX idx_subject_absences_subject_id ON subject_absences(subject_id);
CREATE INDEX idx_subject_absences_student_id ON subject_absences(student_id);
CREATE INDEX idx_final_exams_exam_table_id ON final_exams(exam_table_id);
CREATE INDEX idx_final_exams_subject_id ON final_exams(subject_id);
CREATE INDEX idx_final_exams_students_final_exam_id ON final_exams_students(final_exams_id);
CREATE INDEX idx_final_exams_students_student_id ON final_exams_students(student_id);

-- =====================================================
-- DATOS INICIALES
-- =====================================================

-- Insertar roles básicos
INSERT INTO roles (name) VALUES 
    ('Administrador'),
    ('Estudiante'),
    ('Profesor'),
    ('Preceptor'),
    ('Secretario');

-- Insertar dirección de ejemplo
INSERT INTO address_data (street, number, floor, apartment, neighborhood, locality, province, postal_code, country)
VALUES ('Av. Libertador', '1234', '3', 'C', 'Palermo', 'Buenos Aires', 'Buenos Aires', '1414', 'Argentina');

-- Insertar usuarios con contraseña "123456" para todos
WITH new_address AS (
    SELECT id FROM address_data LIMIT 1
)
INSERT INTO users (id, name, last_name, email, password, cuil, role_id) VALUES
    ('291605f2-c820-46f1-8f68-fc854054bde5', 'Carlos', 'Rodríguez', 'profesor@siaade.edu.ar', '123456', '20-11223344-5', 3),
    ('1f897a1f-fe98-4190-8c65-8ce900337342', 'Ana', 'Martínez', 'preceptor@siaade.edu.ar', '123456', '27-55667788-9', 4),
    ('6cbc31e6-1cc1-4c39-8a1c-6c014f5c77ab', 'Alice', 'Smith', 'alice@student.com', '123456', '20-12345601-1', 2),
    ('0439179f-dc5c-4b65-ad71-10285fd51aa4', 'Bob', 'Brown', 'bob@teacher.com', '123456', '20-12345602-2', 3),
    ('d139ae5a-38fa-440c-8023-f05f14a51bbb', 'Carol', 'Green', 'carol@preceptor.com', '123456', '27-12345603-3', 4),
    ('d7e440b7-6dc7-4470-92e9-13dc7f3c1a06', 'Derek', 'White', 'derek@secretary.com', '123456', '20-12345604-4', 5),
    ('e73717be-fc80-4649-981c-6ddc4d399a26', 'Eva', 'Miller', 'eva@admin.com', '123456', '27-12345605-5', 1),
    ('b195068e-0441-421c-8d5e-809822e6a965', 'Frank', 'Black', 'frank@teacher.com', '123456', '20-12345606-6', 3),
    ('7723f00d-26fd-4dbb-b7de-cc3f04049734', 'Grace', 'Gray', 'grace@teacher.com', '123456', '27-12345607-7', 3),
    ('a2172f20-afce-4673-96a1-e076490fff07', 'Henry', 'Johnson', 'henry@teacher.com', '123456', '20-12345608-8', 3),
    ('ee504097-dfe4-4406-99bb-71b8721f6b2f', 'Fiona', 'Clark', 'fiona@student.com', '123456', '27-12345609-9', 2),
    ('ac6f0664-9607-4a55-83ed-fd13f70d970c', 'George', 'Davis', 'george@student.com', '123456', '20-12345610-0', 2),
    ('c119f7b6-e87d-4015-9be6-06fbd57740f5', 'Hannah', 'Evans', 'hannah@student.com', '123456', '27-12345611-1', 2),
    ('3d3d4354-2aea-4d5a-8aa8-e9e61f920733', 'Irene', 'Foster', 'irene@student.com', '123456', '20-12345612-2', 2),
    ('71e6c20d-4f70-406b-a152-8525b3e29e69', 'Jack', 'Garcia', 'jack@student.com', '123456', '27-12345613-3', 2);

-- Insertar profesores
INSERT INTO teachers (user_id) VALUES
    ('291605f2-c820-46f1-8f68-fc854054bde5'),
    ('0439179f-dc5c-4b65-ad71-10285fd51aa4'),
    ('b195068e-0441-421c-8d5e-809822e6a965'),
    ('7723f00d-26fd-4dbb-b7de-cc3f04049734'),
    ('a2172f20-afce-4673-96a1-e076490fff07');

-- Insertar preceptores
INSERT INTO preceptors (user_id) VALUES
    ('1f897a1f-fe98-4190-8c65-8ce900337342'),
    ('d139ae5a-38fa-440c-8023-f05f14a51bbb');

-- Insertar secretarios
INSERT INTO secretaries (user_id, is_directive) VALUES
    ('d7e440b7-6dc7-4470-92e9-13dc7f3c1a06', false),
    ('e73717be-fc80-4649-981c-6ddc4d399a26', true);

-- Insertar estudiantes con legajos
INSERT INTO students (user_id, legajo) VALUES
    ('6cbc31e6-1cc1-4c39-8a1c-6c014f5c77ab', 'E12345'),
    ('ee504097-dfe4-4406-99bb-71b8721f6b2f', 'E12346'),
    ('ac6f0664-9607-4a55-83ed-fd13f70d970c', 'E12347'),
    ('c119f7b6-e87d-4015-9be6-06fbd57740f5', 'E12348'),
    ('3d3d4354-2aea-4d5a-8aa8-e9e61f920733', 'E12349'),
    ('71e6c20d-4f70-406b-a152-8525b3e29e69', 'E12350');

-- Insertar usuario administrador por defecto
WITH new_admin_role AS (
    SELECT id FROM roles WHERE name = 'Administrador' LIMIT 1
),
new_address AS (
    SELECT id FROM address_data LIMIT 1
),
new_user AS (
    INSERT INTO users (name, last_name, email, password, cuil, role_id)
    SELECT 'Juan', 'Pérez', 'admin@siaade.edu.ar', '$2b$10$hashdeejemplo', '20-12345678-9', r.id
    FROM new_admin_role r
    RETURNING id
),
user_info_insert AS (
    INSERT INTO user_info (user_id, document_type, document_value, phone, emergency_name, emergency_phone)
    SELECT u.id, 'DNI', '12345678', '01123456789', 'Ana Pérez', '01198765432'
    FROM new_user u
    RETURNING user_id
)
INSERT INTO common_data (user_id, address_data_id, sex, birth_date, birth_place, nationality)
SELECT ui.user_id, a.id, 'Masculino', '1985-06-15', 'Buenos Aires', 'Argentina'
FROM user_info_insert ui, new_address a;

-- Crear usuario secretario de ejemplo
WITH secretary_role AS (
    SELECT id FROM roles WHERE name = 'Secretario' LIMIT 1
),
new_secretary_user AS (
    INSERT INTO users (name, last_name, email, password, cuil, role_id)
    SELECT 'María', 'González', 'secretaria@siaade.edu.ar', '$2b$10$hashdeejemplo2', '27-87654321-4', r.id
    FROM secretary_role r
    RETURNING id
)
INSERT INTO secretaries (user_id, is_directive)
SELECT u.id, true
FROM new_secretary_user u;

-- Insertar materias basadas en los datos existentes de la BD
INSERT INTO subjects (id, subject_name, teacher, preceptor, course_num, course_letter, course_year, correlative) VALUES
    (6, 'Matemática I', '291605f2-c820-46f1-8f68-fc854054bde5', '1f897a1f-fe98-4190-8c65-8ce900337342', 1, 'A', '2024', NULL),
    (15, 'Algoritmos', '291605f2-c820-46f1-8f68-fc854054bde5', '1f897a1f-fe98-4190-8c65-8ce900337342', 2, 'A', '2024', NULL),
    (16, 'Física I', '291605f2-c820-46f1-8f68-fc854054bde5', '1f897a1f-fe98-4190-8c65-8ce900337342', 1, 'B', '2024', NULL),
    (17, 'Programación I', '291605f2-c820-46f1-8f68-fc854054bde5', '1f897a1f-fe98-4190-8c65-8ce900337342', 1, 'C', '2024', NULL),
    (18, 'Base de Datos', '291605f2-c820-46f1-8f68-fc854054bde5', '1f897a1f-fe98-4190-8c65-8ce900337342', 2, 'B', '2024', NULL),
    (19, 'Inglés Técnico', '291605f2-c820-46f1-8f68-fc854054bde5', '1f897a1f-fe98-4190-8c65-8ce900337342', 3, 'A', '2024', NULL),
    (20, 'Sistemas Operativos', '291605f2-c820-46f1-8f68-fc854054bde5', '1f897a1f-fe98-4190-8c65-8ce900337342', 3, 'B', '2024', NULL);

-- Actualizar la secuencia para que los próximos IDs sean correctos
SELECT setval('subjects_id_seq', (SELECT MAX(id) FROM subjects));

-- Inscribir algunos estudiantes a materias
WITH student1 AS (SELECT '6cbc31e6-1cc1-4c39-8a1c-6c014f5c77ab'::uuid as user_id),
     student2 AS (SELECT 'ee504097-dfe4-4406-99bb-71b8721f6b2f'::uuid as user_id),
     math1 AS (SELECT 6 as id),
     phys1 AS (SELECT 16 as id),
     prog1 AS (SELECT 17 as id)
INSERT INTO subject_students (subject_id, student_id, enrollment_date)
SELECT m.id, s.user_id, '2024-03-01' FROM math1 m, student1 s
UNION ALL
SELECT p.id, s.user_id, '2024-03-01' FROM phys1 p, student1 s
UNION ALL
SELECT pr.id, s.user_id, '2024-03-01' FROM prog1 pr, student1 s
UNION ALL
SELECT m.id, s.user_id, '2024-03-01' FROM math1 m, student2 s
UNION ALL
SELECT p.id, s.user_id, '2024-03-01' FROM phys1 p, student2 s;

-- =====================================================
-- VISTAS ÚTILES
-- =====================================================

-- Vista completa de usuarios con información detallada
CREATE OR REPLACE VIEW v_users_complete AS
SELECT 
    u.id,
    u.name,
    u.last_name,
    u.email,
    u.cuil,
    r.name as role_name,
    ui.document_type,
    ui.document_value,
    ui.phone,
    cd.sex,
    cd.birth_date,
    cd.nationality,
    ad.street,
    ad.number,
    ad.locality,
    ad.province
FROM users u
LEFT JOIN roles r ON u.role_id = r.id
LEFT JOIN user_info ui ON u.id = ui.user_id
LEFT JOIN common_data cd ON u.id = cd.user_id
LEFT JOIN address_data ad ON cd.address_data_id = ad.id;

-- Vista de estudiantes con información completa
CREATE OR REPLACE VIEW v_students_complete AS
SELECT 
    s.user_id as student_id,
    s.legajo,
    uc.*
FROM students s
JOIN v_users_complete uc ON s.user_id = uc.id;

-- Vista de materias con información de docentes y preceptores
CREATE OR REPLACE VIEW v_subjects_complete AS
SELECT 
    s.id as subject_id,
    s.subject_name,
    s.course_num,
    s.course_letter,
    s.course_year,
    ut.name as teacher_name,
    ut.last_name as teacher_last_name,
    up.name as preceptor_name,
    up.last_name as preceptor_last_name,
    sc.subject_name as correlative_subject
FROM subjects s
LEFT JOIN users ut ON s.teacher = ut.id
LEFT JOIN users up ON s.preceptor = up.id
LEFT JOIN subjects sc ON s.correlative = sc.id;

-- Vista de inscripciones de estudiantes a materias
CREATE OR REPLACE VIEW v_student_enrollments AS
SELECT 
    ss.id as enrollment_id,
    ss.enrollment_date,
    s.legajo,
    u.name as student_name,
    u.last_name as student_last_name,
    sub.subject_name,
    sub.course_num,
    sub.course_letter,
    sub.course_year
FROM subject_students ss
JOIN students s ON ss.student_id = s.user_id
JOIN users u ON s.user_id = u.id
JOIN subjects sub ON ss.subject_id = sub.id;

-- Vista de resultados de exámenes
CREATE OR REPLACE VIEW v_exam_results_complete AS
SELECT 
    er.id as result_id,
    e.title as exam_title,
    e.date as exam_date,
    e.is_valid,
    sub.subject_name,
    s.legajo,
    u.name as student_name,
    u.last_name as student_last_name,
    er.score
FROM exam_results er
JOIN exams e ON er.exam_id = e.id
JOIN subjects sub ON e.subject_id = sub.id
JOIN students s ON er.student_id = s.user_id
JOIN users u ON s.user_id = u.id;

-- =====================================================
-- FUNCIONES ÚTILES
-- =====================================================

-- Función para obtener el promedio de un estudiante en una materia
CREATE OR REPLACE FUNCTION get_student_subject_average(p_student_id UUID, p_subject_id INTEGER)
RETURNS DECIMAL(4,2) AS $$
DECLARE
    average_score DECIMAL(4,2);
BEGIN
    SELECT AVG(er.score)
    INTO average_score
    FROM exam_results er
    JOIN exams e ON er.exam_id = e.id
    WHERE er.student_id = p_student_id 
    AND e.subject_id = p_subject_id
    AND e.is_valid = true
    AND er.score IS NOT NULL;
    
    RETURN COALESCE(average_score, 0);
END;
$$ LANGUAGE plpgsql;

-- Función para contar inasistencias de un estudiante en una materia
CREATE OR REPLACE FUNCTION count_student_absences(p_student_id UUID, p_subject_id INTEGER)
RETURNS INTEGER AS $$
DECLARE
    absence_count INTEGER;
BEGIN
    SELECT COALESCE(array_length(dates, 1), 0)
    INTO absence_count
    FROM subject_absences
    WHERE student_id = p_student_id 
    AND subject_id = p_subject_id;
    
    RETURN COALESCE(absence_count, 0);
END;
$$ LANGUAGE plpgsql;

-- =====================================================
-- COMENTARIOS FINALES
-- =====================================================

-- Script ejecutado exitosamente
-- Base de datos: dbsiaade
-- Esquema: sistema_roles_v2
-- Tablas creadas: 15 principales + tablas de relaciones
-- Datos iniciales: roles, usuarios de ejemplo, materias base
-- Características: UUID para users, SERIAL/INTEGER para otras tablas, 
--                  sistema de mesas de exámenes, gestión de inasistencias

COMMENT ON DATABASE dbsiaade IS 'Sistema Integral de Administración Académica Educativa - SIAADE v2.0';